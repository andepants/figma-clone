/**
 * Crop App Icon Tool
 *
 * AI tool for cropping and cleaning app icons from DALL-E generated images.
 * This tool validates that a single image is selected and returns instructions
 * to trigger the client-side crop workflow.
 *
 * The actual cropping and background removal happens client-side:
 * 1. Detect icon bounds using variance analysis
 * 2. Crop to icon bounds
 * 3. Remove background via Replicate API
 * 4. Create new processed image object
 *
 * This tool only validates selection and returns instructions for the client.
 */

import { z } from 'zod';
import { CanvasTool } from './base';
import { ToolResult, CanvasToolContext } from './types';
import * as logger from 'firebase-functions/logger';

/**
 * Zod schema for crop app icon parameters
 *
 * This command doesn't require any parameters - it operates on the current selection.
 */
const CropAppIconSchema = z.object({});

/**
 * Tool for cropping and cleaning app icons from DALL-E images
 *
 * This tool:
 * 1. Validates that exactly one image is selected
 * 2. Returns success with instructions for client-side processing
 * 3. Client handles: icon detection, cropping, background removal, creating new image
 *
 * The tool is purely validation - actual processing happens client-side.
 */
export class CropAppIconTool extends CanvasTool {
  constructor(context: CanvasToolContext) {
    super(
      'cropAppIcon',
      // Tool description for LLM
      'Crop and clean app icon from DALL-E generated image. ' +
      'This command detects the app icon bounds within a DALL-E image, ' +
      'crops to those bounds, removes the background, and creates a new clean icon. ' +
      'Requires exactly one image to be selected. ' +
      'Use this when user asks to crop an app icon, clean an app icon, ' +
      'or remove background from an app icon generated by DALL-E.',
      CropAppIconSchema,
      context
    );
  }

  /**
   * Execute app icon crop validation
   *
   * Workflow:
   * 1. Validate exactly one object is selected
   * 2. Validate selected object is an image
   * 3. Return success with instructions for client
   *
   * Client will then:
   * - Detect icon bounds using variance analysis
   * - Crop image to icon bounds
   * - Upload cropped image temporarily
   * - Remove background via Replicate API
   * - Create new processed image object
   * - Clean up temporary file
   *
   * @param input - Empty object (no parameters needed)
   * @returns Tool result with success status and instructions
   */
  async execute(input: z.infer<typeof CropAppIconSchema>): Promise<ToolResult> {
    try {
      logger.info('Starting app icon crop validation', {
        userId: this.context.userId,
        canvasId: this.context.canvasId,
        objectCount: this.context.currentObjects?.length || 0,
      });

      // Step 1: Get current objects (selection state is managed client-side)
      const objects = this.context.currentObjects || [];

      logger.info('Current canvas state', {
        totalObjects: objects.length,
      });

      // Step 2: Validate canvas state
      if (objects.length === 0) {
        logger.warn('No objects on canvas');
        return {
          success: false,
          error: 'No objects on canvas',
          message: 'Canvas is empty. Please select an image to crop.',
        };
      }

      // Note: Selection validation happens client-side
      // The AI will see the canvas state and selection in context
      // This tool validates that processing can proceed

      logger.info('App icon crop validation successful');

      // Step 3: Return success with instructions
      // The client will detect this command and trigger the crop workflow
      return {
        success: true,
        message:
          'Ready to crop app icon. Make sure you have selected a single DALL-E generated app icon image. ' +
          'The system will detect the icon bounds, crop to those bounds, remove the background, ' +
          'and create a new clean icon next to the original.',
        data: {
          command: 'crop-appicon',
          requiresSelection: true,
          selectionType: 'image',
          selectionCount: 1,
        },
      };
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      const errorStack = error instanceof Error ? error.stack : undefined;

      logger.error('App icon crop validation failed', {
        error: errorMessage,
        stack: errorStack,
        userId: this.context.userId,
        canvasId: this.context.canvasId,
      });

      return {
        success: false,
        error: errorMessage,
        message: `Failed to validate app icon crop: ${errorMessage}`,
      };
    }
  }
}
